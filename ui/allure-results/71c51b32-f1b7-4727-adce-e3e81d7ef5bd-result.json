{"name": "Проверка url", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a data-v-04dd9692=\"\" href=\"/\" class=\"v-logo\">...</a> is not clickable at point (217, 32). Other element would receive the click: <div class=\"popmechanic-js-clickable-overlay\"></div>\n  (Session info: chrome=130.0.6723.70)\nStacktrace:\n\tGetHandleVerifier [0x010F3853+24035]\n\t(No symbol) [0x0107BBE4]\n\t(No symbol) [0x00F5C2D3]\n\t(No symbol) [0x00FA3B27]\n\t(No symbol) [0x00FA1F89]\n\t(No symbol) [0x00F9FE64]\n\t(No symbol) [0x00F9F45E]\n\t(No symbol) [0x00F9414D]\n\t(No symbol) [0x00FBFE8C]\n\t(No symbol) [0x00F93C04]\n\t(No symbol) [0x00FC0124]\n\t(No symbol) [0x00FD953F]\n\t(No symbol) [0x00FBFC26]\n\t(No symbol) [0x00F9218C]\n\t(No symbol) [0x00F9310D]\n\tGetHandleVerifier [0x01399683+2800659]\n\tGetHandleVerifier [0x013F423E+3172302]\n\tGetHandleVerifier [0x013ECE52+3142626]\n\tGetHandleVerifier [0x01196C00+692624]\n\t(No symbol) [0x01084BFD]\n\t(No symbol) [0x01081908]\n\t(No symbol) [0x01081AA0]\n\t(No symbol) [0x01073F50]\n\tBaseThreadInitThunk [0x75DB7BA9+25]\n\tRtlInitializeExceptionChain [0x770AC0CB+107]\n\tRtlClearBits [0x770AC04F+191]", "trace": "@allure.id(\"SKYPRO-5\")\n    @allure.epic(\"Тyр фирма Fun&Sun\")\n    @allure.severity(\"blocker\")\n    @allure.title(\"Проверка url\")\n    @allure.feature(\"ADD\")\n    @allure.description(\"Открыть главную страницу проверить URL\")\n    def test_logo():\n        browser = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))\n        main_page = MainPage(browser)\n>       main_page.logo()\n\ntest_ui.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nMainPage.py:18: in logo\n    self._driver.find_element(By.CSS_SELECTOR, '[class=\"v-logo\"]').click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E361FA2DB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x75DB7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x770AC0CB+107]\\\\n\\\\tRtlClearBits [0x770AC04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a data-v-04dd9692=\"\" href=\"/\" class=\"v-logo\">...</a> is not clickable at point (217, 32). Other element would receive the click: <div class=\"popmechanic-js-clickable-overlay\"></div>\nE         (Session info: chrome=130.0.6723.70)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010F3853+24035]\nE       \t(No symbol) [0x0107BBE4]\nE       \t(No symbol) [0x00F5C2D3]\nE       \t(No symbol) [0x00FA3B27]\nE       \t(No symbol) [0x00FA1F89]\nE       \t(No symbol) [0x00F9FE64]\nE       \t(No symbol) [0x00F9F45E]\nE       \t(No symbol) [0x00F9414D]\nE       \t(No symbol) [0x00FBFE8C]\nE       \t(No symbol) [0x00F93C04]\nE       \t(No symbol) [0x00FC0124]\nE       \t(No symbol) [0x00FD953F]\nE       \t(No symbol) [0x00FBFC26]\nE       \t(No symbol) [0x00F9218C]\nE       \t(No symbol) [0x00F9310D]\nE       \tGetHandleVerifier [0x01399683+2800659]\nE       \tGetHandleVerifier [0x013F423E+3172302]\nE       \tGetHandleVerifier [0x013ECE52+3142626]\nE       \tGetHandleVerifier [0x01196C00+692624]\nE       \t(No symbol) [0x01084BFD]\nE       \t(No symbol) [0x01081908]\nE       \t(No symbol) [0x01081AA0]\nE       \t(No symbol) [0x01073F50]\nE       \tBaseThreadInitThunk [0x75DB7BA9+25]\nE       \tRtlInitializeExceptionChain [0x770AC0CB+107]\nE       \tRtlClearBits [0x770AC04F+191]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Открыть главную страницу проверить URL", "start": 1729973493260, "stop": 1729973513636, "uuid": "0c7e4229-5c34-4151-bc61-1213796e8e7e", "historyId": "5d87fb2ed7123f5be7290d4e148b5f40", "testCaseId": "5d87fb2ed7123f5be7290d4e148b5f40", "fullName": "test_ui#test_logo", "labels": [{"name": "feature", "value": "ADD"}, {"name": "as_id", "value": "SKYPRO-5"}, {"name": "severity", "value": "blocker"}, {"name": "epic", "value": "Тyр фирма Fun&Sun"}, {"name": "suite", "value": "test_ui"}, {"name": "host", "value": "прохор"}, {"name": "thread", "value": "24432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ui"}]}